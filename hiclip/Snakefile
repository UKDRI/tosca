# Staufen 2 mouse hiCLIP pipeline
# A. M. Chakrabarti
# Last updated: 30th April 2020

# sbatch -N 1 -t 24:00:00 -J ehiclip -o ehiclip_%A.out --wrap="time snakemake -k --cluster 'sbatch {params.cluster}' --jobs 200 --latency-wait 60"

from os.path import join

# Import config file & parameters

configfile: 'config.yaml'

# Import paths from config file

DATAPATH=config['datapath']

rule all:
    input:
        # expand("results/fastqc/{sample}_fastqc.html", sample=config["samples"]),
        # expand("results/hybrids/{sample}.hybrid.bam", sample=config["samples"]),
        expand("results/preprocessed/{sample}.bt2.bam", sample=config["samples"]),
        expand("results/star_chimeric/{sample}.Aligned.sortedByCoord.out.bam", sample=config["samples"]),
        # expand("results/star_chimeric_0/{sample}.Aligned.sortedByCoord.out.bam", sample=config["samples"]),
        # expand("results/star_chimeric_0j/{sample}.Aligned.sortedByCoord.out.bam", sample=config["samples"]),
        # expand("results/star_chimeric_0j/{sample}.genomic_hybrids.bam", sample=config["samples"]),
        expand("results/star_chimeric_withinBAM/{sample}.Aligned.sortedByCoord.out.bam", sample=config["samples"]),
        # expand("results/bowtie2/{sample}.bam", sample=config["samples"]),
        expand("results/hybrids/{sample}.hybrids.tsv.gz", sample=config["samples"]),
        expand("results/hybrids/{sample}.hybrids.mfe.tsv.gz", sample=config["samples"]),
        expand("results/hybrids/{sample}.intragenic_hybrids.mfe.clusters.tsv.gz", sample=config["samples"]), 
        expand("results/bam/{sample}.intragenic_hybrids.mfe.clusters.bam", sample=config["samples"]),
        expand("results/clusters/{sample}.clusters.tsv", sample=config["samples"]),
        "results/plots/cluster_bindingenergy.pdf"
        # expand("results/irclash_style/bowtie2/{sample}.bam", sample=config["samples"]),

# =============================================================================
# FastQC
# =============================================================================

rule fastqc:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        "results/fastqc/{sample}_fastqc.html"
    params:
        fc="--outdir results/fastqc",
        cluster="-J fastqc -N 1 --mem=16G -t 12:00:00 -o logs/fastqc.{sample}.%A.log"
    run:
        shell("fastqc {input} {params.fc}")
        fastqc_out = "/".join(("results/fastqc", os.path.basename(input[0])))
        fastqc_out = "_".join((fastqc_out, "fastqc.html"))
        fastqc_out = fastqc_out.replace(".fastq.gz","")
        shell("echo {fastqc_out}")
        shell("mv {fastqc_out} {output}")

# =============================================================================
# Preprocessing
# =============================================================================

rule removeAdapters:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        fastq="results/trimmed/{sample}.fastq.gz"
    params:
        cluster="-N 1 -c 8 --mem=16G -t 12:00:00 -J removeAdapters -o logs/removeAdapters.{sample}.%A.log"
    shell:
        """
        cutadapt -j 8 --minimum-length 16 -q 10 -a AGATCGGAAGAGC -o {output.fastq} {input}
        """

# =============================================================================
# Premapping
# =============================================================================

rule filterReads:
    input:
        fastq="results/trimmed/{sample}.fastq.gz",
    output:
        starbam=temp("results/preprocessed/{sample}.Aligned.sortedByCoord.out.bam"),
        starbai=temp("results/preprocessed/{sample}.Aligned.sortedByCoord.out.bam.bai"),
        splicedbam=temp("results/preprocessed/{sample}.spliced.bam"),
        splicedfastq=temp("results/preprocessed/{sample}.spliced.fastq"),
        filteredbam=temp("results/preprocessed/{sample}.filtered.bam"),
        filteredfastq="results/preprocessed/{sample}.filtered.fastq.gz",
        # bt2bam=temp("results/preprocessed/{sample}.bt2.bam"),
        # bt2bai=temp("results/preprocessed/{sample}.bt2.bam.bai"),
        bt2bam="results/preprocessed/{sample}.bt2.bam",
        bt2bai="results/preprocessed/{sample}.bt2.bam.bai",
        a=temp("results/preprocessed/{sample}.Log.progress.out"),
        b=temp("results/preprocessed/{sample}.Log.out"),
        c=temp("results/preprocessed/{sample}.SJ.out.tab"),
    params:
        starindex=config['stargenome'],
        bt2index=config['bt2'],
        outprefix="results/preprocessed/{sample}.",
        removesplicedreadsscript=config['removesplicedreads'],
        removeperfectlocalalignedreadsscript=config['removeperfectlocalalignedreads'],
        cluster="-N 1 -c 8 -J filterReads --mem=40GB -t 12:00:00 -o logs/filterReads.{sample}.%A.log"
    threads:
        8
    shell:
        """
        # ==========
        # First filter spliced reads
        # ==========

        STAR --runThreadN {threads} \
        --genomeDir {params.starindex} --genomeLoad NoSharedMemory \
        --readFilesIn {input.fastq} --readFilesCommand zcat \
        --outFileNamePrefix {params.outprefix} \
        --outFilterMultimapNmax 20 --outSAMmultNmax 1 \
        --outSAMunmapped Within \
        --alignSJoverhangMin 8 --alignSJDBoverhangMin 1  --outFilterType BySJout \
        --alignIntronMin 20 --alignIntronMax 100000 \
        --outFilterMismatchNoverReadLmax 0.04 \
        --outSAMattributes All --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 60000000000

        sambamba index -t 8 {output.starbam}

        python {params.removesplicedreadsscript} {output.starbam} {output.splicedbam}
        bedtools bamtofastq -i {output.splicedbam} -fq {output.splicedfastq}

        # ==========
        # Then filter reads that align perfectly
        # ==========
        
        ml Bowtie2
        bowtie2 --local --norc -p {threads} -x {params.bt2index} -q -U {output.splicedfastq} | samtools view -hu - | sambamba sort -t 8 -o {output.bt2bam} /dev/stdin
        sambamba index -t 8 {output.bt2bam}

        python {params.removeperfectlocalalignedreadsscript} {output.bt2bam} {output.filteredbam}
        bedtools bamtofastq -i {output.splicedbam} -fq /dev/stdout | pigz > {output.filteredfastq}
        """

# =============================================================================
# Mapping strategies
# =============================================================================

# 1. STAR + chimeric

# rule mapStar:
#     input:
#         fastq="results/preprocessed/{sample}.filtered.fastq.gz",
#     output:
#         bam="results/star_chimeric/{sample}.Aligned.sortedByCoord.out.bam",
#         bai="results/star_chimeric/{sample}.Aligned.sortedByCoord.out.bam.bai",
#         unmapped="results/star_chimeric/{sample}.Unmapped.out.mate1.gz",
#         log="results/logs/{sample}.genome.log",
#     params:
#         starindex=config['star'],
#         outprefix="results/star_chimeric/{sample}.",
#         log="results/star_chimeric/{sample}.Log.final.out",
#         cluster="-J mapStar -N 1 -c 8 --mem=40GB -t 12:00:00 -o logs/mapStar.{sample}.%A.log"
#     threads:
#         8
#     shell:
#         """
#         ml SAMtools

#         STAR --runThreadN {threads} \
#         --genomeDir {params.starindex} --genomeLoad NoSharedMemory \
#         --readFilesIn {input.fastq} --readFilesCommand zcat \
#         --outFileNamePrefix {params.outprefix} \
#         --outReadsUnmapped Fastx \
#         --outFilterMultimapNmax 1 \
#         --alignIntronMin 10 --scoreGapNoncan -4 --scoreGapATAC -4 \
#         --chimSegmentMin 12 --chimJunctionOverhangMin 12  --chimScoreJunctionNonGTAG 0 --chimOutType WithinBam \
#         --alignSJoverhangMin 12 --alignSJDBoverhangMin 12 --alignSJstitchMismatchNmax 5 -1 5 5 \
#         --outSAMattributes All --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 9839723217 # --limitBAMsortRAM 6000000000

#         pigz {params.outprefix}Unmapped.out.mate1

#         sambamba index -t {threads} {output.bam}
#         mv {params.log} {output.log}
#         """

# rule mapStar0:
#     input:
#         fastq="results/preprocessed/{sample}.filtered.fastq.gz",
#     output:
#         bam="results/star_chimeric_0/{sample}.Aligned.sortedByCoord.out.bam",
#         bai="results/star_chimeric_0/{sample}.Aligned.sortedByCoord.out.bam.bai",
#         unmapped="results/star_chimeric_0/{sample}.Unmapped.out.mate1.gz",
#         log="results/logs/{sample}.genome.log",
#     params:
#         starindex=config['star'],
#         outprefix="results/star_chimeric_0/{sample}.",
#         log="results/star_chimeric_0/{sample}.Log.final.out",
#         cluster="-J mapStar0 -N 1 -c 8 --mem=40GB -t 12:00:00 -o logs/mapStar0.{sample}.%A.log"
#     threads:
#         8
#     shell:
#         """
#         ml SAMtools

#         STAR --runThreadN {threads} \
#         --genomeDir {params.starindex} --genomeLoad NoSharedMemory \
#         --readFilesIn {input.fastq} --readFilesCommand zcat \
#         --outFileNamePrefix {params.outprefix} \
#         --outReadsUnmapped Fastx \
#         --outFilterMultimapNmax 1 \
#         --alignIntronMin 10 --scoreGapNoncan 0 --scoreGapATAC 0 --scoreGapGCAG 0 --scoreGap 0 \
#         --chimSegmentMin 12 --chimJunctionOverhangMin 12  --chimScoreJunctionNonGTAG 0 \
#         --chimNonchimScoreDropMin 10 --chimOutType WithinBAM \
#         --alignSJoverhangMin 12 --alignSJDBoverhangMin 12 --alignSJstitchMismatchNmax 5 -1 5 5 \
#         --outSAMattributes All --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 9839723217 # --limitBAMsortRAM 6000000000

#         pigz {params.outprefix}Unmapped.out.mate1

#         sambamba index -t {threads} {output.bam}
#         mv {params.log} {output.log}
#         """

rule mapStar:
    input:
        fastq="results/preprocessed/{sample}.filtered.fastq.gz",
    output:
        tmpbam=temp("results/star_chimeric/{sample}.Aligned.out.bam"),
        bam="results/star_chimeric/{sample}.Aligned.sortedByCoord.out.bam",
        bai="results/star_chimeric/{sample}.Aligned.sortedByCoord.out.bam.bai",
        chimeric="results/star_chimeric/{sample}.Chimeric.out.junction.gz",
        # unmapped="results/star_chimeric/{sample}.Unmapped.out.mate1.gz",
        log="results/logs/{sample}.genome.log",
    params:
        starindex=config['star'],
        outprefix="results/star_chimeric/{sample}.",
        log="results/star_chimeric/{sample}.Log.final.out",
        cluster="-J mapStar -N 1 -c 8 --mem=40GB -t 12:00:00 -o logs/mapStar.{sample}.%A.log"
    threads:
        8
    shell:
        """
        ml SAMtools

        STAR --runThreadN {threads} \
        --genomeDir {params.starindex} --genomeLoad NoSharedMemory \
        --readFilesIn {input.fastq} --readFilesCommand zcat \
        --outFileNamePrefix {params.outprefix} \
        --outFilterMultimapNmax 1 \
        --alignIntronMin 10 --scoreGapNoncan 0 --scoreGapATAC 0 --scoreGapGCAG 0 --scoreGap 0 \
        --chimSegmentMin 12 --chimJunctionOverhangMin 12  --chimScoreJunctionNonGTAG 0 \
        --chimNonchimScoreDropMin 10 --chimOutType Junctions \
        --alignSJoverhangMin 12 --alignSJDBoverhangMin 12 --alignSJstitchMismatchNmax 5 -1 5 5 \
        --outSAMattributes All --outSAMtype BAM Unsorted --limitBAMsortRAM 9839723217 # --limitBAMsortRAM 6000000000

        sambamba sort -t {threads} -o {output.bam} {output.tmpbam}
        pigz {params.outprefix}Chimeric.out.junction
        mv {params.log} {output.log}
        """

rule mapStarwithinBAM:
    input:
        fastq="results/preprocessed/{sample}.filtered.fastq.gz",
    output:
        tmpbam=temp("results/star_chimeric_withinBAM/{sample}.Aligned.out.bam"),
        bam="results/star_chimeric_withinBAM/{sample}.Aligned.sortedByCoord.out.bam",
        bai="results/star_chimeric_withinBAM/{sample}.Aligned.sortedByCoord.out.bam.bai",
        # chimeric="results/star_chimeric_withinBAM/{sample}.Chimeric.out.junction.gz",
        # unmapped="results/star_chimeric_withinBAM/{sample}.Unmapped.out.mate1.gz",
        log="results/logs/{sample}.withinBAM.genome.log",
    params:
        starindex=config['star'],
        outprefix="results/star_chimeric_withinBAM/{sample}.",
        log="results/star_chimeric_withinBAM/{sample}.Log.final.out",
        cluster="-J mapStar -N 1 -c 8 --mem=40GB -t 12:00:00 -o logs/mapStarwithinBAM.{sample}.%A.log"
    threads:
        8
    shell:
        """
        ml SAMtools

        STAR --runThreadN {threads} \
        --genomeDir {params.starindex} --genomeLoad NoSharedMemory \
        --readFilesIn {input.fastq} --readFilesCommand zcat \
        --outFileNamePrefix {params.outprefix} \
        --outFilterMultimapNmax 1 \
        --alignIntronMin 10 --scoreGapNoncan 0 --scoreGapATAC 0 --scoreGapGCAG 0 --scoreGap 0 \
        --chimSegmentMin 12 --chimJunctionOverhangMin 12  --chimScoreJunctionNonGTAG 0 \
        --chimNonchimScoreDropMin 10 --chimOutType WithinBAM \
        --alignSJoverhangMin 12 --alignSJDBoverhangMin 12 --alignSJstitchMismatchNmax 5 -1 5 5 \
        --outSAMattributes All --outSAMtype BAM Unsorted --limitBAMsortRAM 9839723217 # --limitBAMsortRAM 6000000000

        sambamba sort -t {threads} -o {output.bam} {output.tmpbam}
        # pigz {params.outprefix}Chimeric.out.junction
        mv {params.log} {output.log}
        """

# rule selectHybrids:
#     input:
#         bam="results/star_chimeric_0j/{sample}.Aligned.sortedByCoord.out.bam"
#     output:
#         hybridbam="results/star_chimeric_0j/{sample}.genomic_hybrids.bam",
#         hybridbai="results/star_chimeric_0j/{sample}.genomic_hybrids.bam.bai"
#     params:
#         cluster="-J selectHybrids -N 1 -t 2:00:00 -o logs/selectHybrids.{sample}.%A.log"
#     shell:
#         """
#         samtools view -h {input.bam} | awk -v OFS="\t" '$0 ~ /^@/{{print $0;next;}} $6 ~ /N/' | samtools view -hb - | sambamba sort -t 8 -o {output.hybridbam} /dev/stdin
#         """

rule extractHybrids:
    input:
        aligned="results/star_chimeric/{sample}.Aligned.sortedByCoord.out.bam",
        chimeric="results/star_chimeric/{sample}.Chimeric.out.junction.gz"
    output:
        hybrids="results/hybrids/{sample}.hybrids.tsv.gz",
    params:
        hybrids="results/hybrids/{sample}.hybrids.tsv",
        genome=config['genome_csv'],
        gethybridsscript=config['gethybrids'],
        cluster="-J extractHybrids -c 4 --mem=32G -t 2:00:00 -o logs/extractHybrids.{sample}.%A.log"
    shell:
        """
        Rscript --vanilla {params.gethybridsscript} -a {input.aligned} -c {input.chimeric} -r {params.genome} -o {params.hybrids}
        pigz {params.hybrids}
        """

rule getMFE:
    input:
        hybrids="results/hybrids/{sample}.hybrids.tsv.gz"
    output:
        hybrids="results/hybrids/{sample}.hybrids.mfe.tsv.gz",
    params:
        hybrids="results/hybrids/{sample}.hybrids.mfe.tsv",
        genome=config['genome_csv'],
        getmfescript=config['getmfe'],
        cluster="-J getMFE -c 8 --mem=32G -t 24:00:00 -o logs/getMFE.{sample}.%A.log"
    shell:
        """
        Rscript --vanilla {params.getmfescript} -i {input.hybrids} -r {params.genome} -o {params.hybrids}
        pigz {params.hybrids}
        """

rule getClusters:
    input:
        hybrids="results/hybrids/{sample}.hybrids.mfe.tsv.gz",
    output:
        hybrids="results/hybrids/{sample}.intragenic_hybrids.mfe.clusters.tsv.gz",
    params:
        hybrids="results/hybrids/{sample}.intragenic_hybrids.mfe.clusters.tsv",
        percent=0.5,
        getclustersscript=config['getclusters'],
        cluster="-J getClusters -c 8 --mem=32G -t 24:00:00 -o logs/getClusters.{sample}.%A.log"
    shell:
        """
        Rscript --vanilla {params.getclustersscript} -i {input.hybrids} -p {params.percent} -o {params.hybrids}
        pigz {params.hybrids}
        """

rule collapseClusters:
    input:
        hybrids="results/hybrids/{sample}.intragenic_hybrids.mfe.clusters.tsv.gz",
    output:
        hybrids="results/clusters/{sample}.clusters.tsv",
    params:
        gtf=config['gtf'],
        collapseclustersscript=config['collapseclusters'],
        cluster="-J collapseClusters -c 8 --mem=32G -t 24:00:00 -o logs/collapseClusters.{sample}.%A.log"
    shell:
        """
        Rscript --vanilla {params.collapseclustersscript} -i {input.hybrids} -a {params.gtf} -o {output.hybrids}
        """

rule convertCoordinates:
    input:
        hybrids="results/hybrids/{sample}.intragenic_hybrids.mfe.clusters.tsv.gz",
    output:
        bed="results/bed/{sample}.intragenic_hybrids.mfe.clusters.bed",
        tempbam=temp("results/bam/{sample}.intragenic_hybrids.mfe.clusters.temp.bam"),
        bam="results/bam/{sample}.intragenic_hybrids.mfe.clusters.bam",
    params:
        gtf=config['gtf'],
        fai=config['faigenome'],
        convertcoordinatesscript=config['convertcoordinates'],
        converttobamscript=config['converttobam'],
        cluster="-J convertCoordinates -c 8 --mem=32G -t 24:00:00 -o logs/convertCoordinates.{sample}.%A.log"
    shell:
        """
        Rscript --vanilla {params.convertcoordinatesscript} -i {input.hybrids} -a {params.gtf} -o {output.bed}
        
        bedtools bedtobam -bed12 -i {output.bed} -g {params.fai} > {output.tempbam}
        python {params.converttobamscript} {output.tempbam} {output.bam}
        """

# Function to define combined inputs for QC plots
def hybrids_input(wildcards):
    files = expand("results/hybrids/{sample}.hybrids.tsv.gz", sample = config["samples"])
    return files

def clusters_input(wildcards):
    files = expand("results/clusters/{sample}.clusters.tsv", sample = config["samples"])
    return files

rule plotQC:
    input:
        hybrids = hybrids_input,
        clusters = clusters_input
    output:
        "results/plots/hybrid_orientation_count.pdf",
        "results/plots/hybrid_orientation_percent.pdf",
        "results/plots/hybrid_recovery_count.pdf",
        "results/plots/hybrid_recovery_percent.pdf",
        "results/plots/hybrid_sjmotif.pdf",
        "results/plots/intragenichybrid_sjmotif.pdf",
        "results/plots/cluster_bindingenergy.pdf",
    params:
        cluster="-J plotQC -c 8 --mem=32G -t 24:00:00 -o logs/plotQC.%A.log"
    script:
        "scripts/PlotQC.R"



# # 2. Bowtie2

# # ==========
# # Map reads Bowtie2
# # ==========

# # --very-sensitive-local -f -p 36 -k 100 

# rule mapBowtie2:
#     input:
#         fastq="results/preprocessed/{sample}.filtered.fastq.gz",
#     output:
#         bam="results/bowtie2/{sample}.bam"
#     params:
#         bt2index=config['bt2'],
#         bt2param="-D 20 -R 3 -N 0 -L 16 -k 20 --local -i S,1,0.50 --score-min L,18,0 --ma 1 --np 0 --mp 2,2 --rdg 5,1 --rfg 5,1",
#         cluster="-N 1 -n 8 -J mapBowtie2 -t 12:00:00 -o logs/mapBowtie2.{sample}.%A.log"
#     threads:
#         8
#     shell:
#         """
#         ml Bowtie2
#         bowtie2 {params.bt2param} -p {threads} -x {params.bt2index} -q -U {input.fastq} | samtools view -hu - | sambamba sort -t {threads} -o {output.bam} /dev/stdin
#         """

# # 3. irCLASH approach

# rule irCLASH:
#     input:
#         fastq="results/star_chimeric/{sample}.Unmapped.out.mate1.gz",
#     output:
#         bam="results/irclash_style/bowtie2/{sample}.bam",
#         # reordered="results/irclash/{sample}_reordered.fasta",
#         # bam="results/irclash/star/{sample}.Aligned.sortedByCoord.out.bam",
#         # bai="results/irclash/star/{sample}.Aligned.sortedByCoord.out.bam.bai",
#     params:
#         bt2index=config['bt2'],
#         bt2param="-D 20 -R 3 -N 0 -L 16 -k 100 --local -i S,1,0.50 --score-min L,18,0 --ma 1 --np 0 --mp 2,2 --rdg 5,1 --rfg 5,1",
#         outprefix="results/irclash/star/{sample}.",
#         starindex=config['star'],
#         cluster="-N 1 -n 8 -J irCLASH -t 12:00:00 -o logs/irCLASH_style.{sample}.%A.log"
#     threads:
#         8
#     shell:
#         """
#         # First map unmapped
#         ml Bowtie2
#         bowtie2 {params.bt2param} -p {threads} -x {params.bt2index} -q -U {input.fastq} | samtools view -hu - | sambamba sort -t {threads} -o {output.bam} /dev/stdin
#         """


# rule irCLASH:
#     input:
#         fastq="results/star_chimeric/{sample}.Unmapped.out.mate1.gz",
#     output:
#       fasta=temp("results/irclash/{sample}.fasta"),
#         sam="results/irclash/bowtie2/{sample}.sam",
#         reordered="results/irclash/{sample}_reordered.fasta",
#         # bam="results/irclash/star/{sample}.Aligned.sortedByCoord.out.bam",
#         # bai="results/irclash/star/{sample}.Aligned.sortedByCoord.out.bam.bai",
#     params:
#         bt2index=config['bt2'],
#         bt2param="-D 20 -R 3 -N 0 -L 16 -k 100 --local -i S,1,0.50 --score-min L,18,0 --ma 1 --np 0 --mp 2,2 --rdg 5,1 --rfg 5,1",
#         outprefix="results/irclash/star/{sample}.",
#         starindex=config['star'],
#         cluster="-N 1 -n 8 -J irCLASH -t 12:00:00 -o logs/irCLASH.{sample}.%A.log"
#     threads:
#         8
#     shell:
#         """
#         # Convert fastq to fasta
#       ml FASTX-Toolkit
#       zcat {input.fastq} | \
#       fastq_to_fasta > {output.fasta}

#         # First map unmapped
#         ml Bowtie2
#         bowtie2 {params.bt2param} -p {threads} -x {params.bt2index} -f -U {output.fasta} > {output.sam}

#       # Then re-arrange reads
#       perl /home/camp/chakraa2/working/nobby/bin/irCLASH/ext_clash_reads --in {output.sam} --seq {output.fasta} --out {output.reordered}

#       # # Then map with STAR

#         """   

#           #       ml SAMtools

  #       STAR --runThreadN {threads} \
  #       --genomeDir {params.starindex} --genomeLoad NoSharedMemory \
  #       --readFilesIn {output.reordered} \
  #       --outFileNamePrefix {params.outprefix} \
  #       --outFilterMultimapNmax 1 \
  #       --alignIntronMin 10 --scoreGapNoncan -4 --scoreGapATAC -4 \
  #       --chimSegmentMin 12 --chimJunctionOverhangMin 12  --chimScoreJunctionNonGTAG 0 --chimOutType SeparateSAMold \
  #       --alignSJoverhangMin 12 --alignSJDBoverhangMin 12 --alignSJstitchMismatchNmax 5 -1 5 5 \
  #       --outSAMattributes All --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 9839723217 # --limitBAMsortRAM 6000000000

  #       sambamba index -t {threads} {output.bam}
  